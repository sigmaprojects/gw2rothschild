component output="false" singleton{	public void function test(event,rc,prc) {		api = getModel('cfGW2SpidyAPI');				api.getAllItems();		abort;	}	public void function updateMarketData(event,rc,prc) {		abort;		getModel('MarketDataUpdateService').updateMarketData();		abort;
	}		public void function updateRecipes(event,rc,prc) {		abort;		getModel('RecipeUpdateService').updateRecipes();		abort;	}		public void function updateItems(event,rc,prc) {		abort;		getModel('ItemUpdateService').updateItems();		abort;	}	public void function runAlerter(event,rc,prc) {		abort;		getModel('AlertService').startAlertingWorker();		abort;	}	public void function tasks(event,rc,prc) {		rc.htmltitle = "Task Management";		event.setView("tools/tasks/index");
	}	public void function manageTask(event,rc,prc) {		var taskName = Event.getValue('taskName','');		var action = Event.getValue('taskaction','');		if( Len(trim(TaskName)) && Len(trim(action)) ) {			if( structKeyExists(application,taskName) ) {				var Task = application[taskName];				switch(action) {					case 'unpause': {						Task.unpause();						break;
					}					case 'pause': {						Task.pause();						break;					}					case 'run': {						Task.run();						break;					}
				}
			}
		}		setNextEvent('tools.tasks');	}	// Default Action	function allitemlist(event,rc,prc){		event.setView('tools/allitemlist');	}	function recipiesapilist(event,rc,prc) {		var cfGW2SpidyAPI = new lib.cfgw2spidyapi.cfGW2SpidyAPI();		var r = cfGW2SpidyAPI.getRecipes();		writedump(var=r);		abort;	}		function generatedoc(event,rc,prc){		var colddoc = createObject("component", "ColdDoc.ColdDoc").init();				abort;		var strategy = createObject("component", "colddoc.strategy.api.HTMLAPIStrategy").init(expandPath("/model/cfgw2spidyapi"), "CF Implementation of the GW2Spidy Public API");		colddoc.setStrategy(strategy);				colddoc.generate(expandPath("/model/cfgw2spidyapi"), "cfGW2SpidyAPI");				writedump("Docs generated");				Event.noRender();	}	}